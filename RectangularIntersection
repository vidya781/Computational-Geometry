A program which tests if two rectangles have a nonempty intersection. If the intersection is nonempty, return the rectangle formed by their
intersection.

The first thing to note is that there are qualitatively different ways in which rectangles can intersect, they have a partial overlap,
one contains the other, they have a common side, they share a common corner, they form a cross, they form a tee and the case analysis can be quite 
involved from that point onwards.

A better approach would be to focus on conditions under which it can be guaranteed that the rectangles do not intersect.
For example,the rectangle with lower most point( left most) (1,2) and width 3, and height of 4 cannot possibly intersect with the rectangle
with left most lower point(5,3), width 2 and height 4 since the X values of the first rectangle range from 1 to 1 + 3 = 4, inclusive and
the X-values of the second rectangle range from 5 to 5 + 2 = 7, inclusive.

Similarly, if the Y values of the first rectangle do not intersect with the Y values of the second rectangle, the two rectangles cannot intersect.

Equivalently, if the set of X values for the rectangles intersect and the set of Y values for the rectangles intersect, then all the points with those X and Y 
alues are common to the two rectangles, so there is a non empty intersection.

public static class Rectangle{
 int x, y, width, height;
 
 public Rectangle(int x, int y, int width, int height) {
   this.x = x;
   this.y = y;
   this.width = width;
   this.height = height;
   }
 }
 public static Rectangle intersectRectangle(Rectangle R1, Rectangle R2){
  if(!isIntersect(R1,R2)){
    return new Rectangle(0,0,-1,-1);  // No intersection
  }
  return new Rectangle(
     Math.max(R1.x,R2.x),Math.max(R1.y,R2.y),
     Math.min(R1.x + R1.width,R2.x + R2.width) - Math.max(R1.x,R2.x),
     Math.min(R1.y + R1.height,R2.y + R2.height) - Math.max(R1.y,R2.y));
   }
   public static boolean isIntersect(Rectangle R1, Rectangle R2){
     return R1.x <= R2.x + R2.width && R1.x + R1.width >= R2.x && R1.y <= R2.y + R2.height && R1.y + R1.height >= R2.y;
     }
TC is O(1) since the number of operations is constant.
